#! /bin/bash


#    Exit on error.

set -eo pipefail

_e () {
	echo -e "${0##*/}: \e[31mError:\e[0m $@" >&2;
	exit 1
}


#    Clean mountpoints and temporary directories on exit.
#    To be called by the trap.

_on_exit () {
	cd /
	while mountpoint -q $TMP_MNT; do
		umount -f $TMP_MNT
	done
	rm -rf $TMP_MNT
}


#    Confirm an operation.
#    _confirm <message>.

_confirm () {
	echo -en "\e[31m$@\e[0m [y/N] "

	read a

	[ "$a" = y ] &&
		return 0 ||
		return 1
}


#    Check an image name.
#    _check_img_name <name>.

_check_img_name () {
	echo $@ | grep -qE '^[a-zA-Z0-9_]+/[a-zA-Z0-9_]+$'
}


#    Find a partition based on a label.
#    _find_part <device> <label>.

_find_part () {
	lsblk -no PATH,PARTLABEL $1 | grep $2 | cut -d ' ' -f 1
}


#    Mount a device partition.
#    _mount <device> <partition label> [mount options].

_mount () {
	mount $(_find_part $1 $2) $TMP_MNT ${3:+-o $3}
}


#    Create or restore a broken ESP.
#    _create_esp <partition>.

_create_esp () {
	mkfs.vfat -F 32 $1
	mount $1 $TMP_MNT

	mkdir -p \
		$TMP_MNT/efi/boot \
		$TMP_MNT/boot/grub

	cp \
		$PREFIX/bootx64.efi \
		$TMP_MNT/efi/boot

	cp -r \
		$PREFIX/grub \
		$TMP_MNT/boot/grub
}


#    Initialize a device.
#    _init <device>.

_init () {
	[ $# -eq 1 ] ||
		_e "Wrong number of arguments."

	grep -q $1 /proc/mounts &&
		_e "'$1' is mounted! Unmount it before continuing."

	_confirm "ALL data on '$1' will be destroyed. Do you want to proceed?"

	echo "Wiping '$1'. Please wait."

	wipefs -af $1

	sgdisk -Z \
		-n 1::64M -t 1:EF00 -c 1:ZNX_BOOT \
		-N 2 -t 2:8300 -c 2:ZNX_DATA $1

	local boot_part data_part

	until [ "$boot_part" -a "$data_part" ]; do
		sleep 1
		boot_part=$(_find_part $1 ZNX_BOOT)
		data_part=$(_find_part $1 ZNX_DATA)
	done

	_create_esp $boot_part
	mkfs.btrfs -f $data_part

	echo "Successfully initialized '$1'."
}


#    Attempt to restore a broken ESP.
#    _fix_esp <device>.

_fix_esp () {
	[ $# -eq 1 ] ||
		_e "Wrong number of arguments."

	echo "Restoring the ESP on '$1'."

	_create_esp $(_find_part $1 ZNX_BOOT)

	echo "Successfully restored the ESP on '$1'."
}


#    Deploy an image.
#    _deploy [-k] <device> <image> <origin>.

_deploy () {
	for arg in $@; do

		case $arg in

			-k)

				axel_args="$axel_args -k"
				shift

			;;

		esac

	done

	[ $# -eq 3 ] ||
		_e "Wrong number of arguments."

	_mount $1 ZNX_DATA
	echo "Deploying '$2'."

	[ -d $TMP_MNT/STORE/$2 ] &&
		_e "'$2' is already deployed."

	mkdir -p $TMP_MNT/STORE/$2/DATA

	(
		trap "rm -rf $TMP_MNT/STORE/$2" INT

		[ -f "$3" ] &&
			cp "$3" $TMP_MNT/STORE/$2/$ACTIVE_IMAGE

		[ -d "$3" ] &&
			mkiso "$3" $TMP_MNT/STORE/$2/$ACTIVE_IMAGE

		[ -e "$3" ] ||
			axel $axel_args "$3" -a -o $TMP_MNT/STORE/$2/$ACTIVE_IMAGE

	) || _e "Failed to deploy '$2'."

	echo "Successfully deployed '$2'."
}


#    Rename an image.
#    _rename <device> <image> <image>.

_rename () {
	[ $# -eq 3 ] ||
		_e "Wrong number of arguments."

	_mount $1 ZNX_DATA

	echo "Renaming '$2'."

	[ -d $TMP_MNT/STORE/$2 ] ||
		_e "'$2' is not deployed."

	_check_img_name $3 ||
		_e "Bad image name (must match '^[a-zA-Z0-9_]+/[a-zA-Z0-9_]+$')."

	mv $TMP_MNT/STORE/$2 $TMP_MNT/STORE/$3 ||
		_e "Unable to rename '$2'."

	echo "Successfully renamed '$2' to '$3'."
}


#    Update an image.
#    _update <device> <image>.

_update () {
	[ $# -eq 2 ] ||
		_e "Wrong number of arguments."

	_mount $1 ZNX_DATA

	echo "Updating '$2'."

	cd $TMP_MNT/STORE/$2 ||
		_e "'$2' is not deployed."

	#    This will be removed soon.
	UPDATE_URL=$(dd if=$ACTIVE_IMAGE bs=1 skip=33651 count=512 2> /dev/null)

	U_TMP_MNT=$(mktemp -d)
	mount -r $TMP_MNT/STORE/$2/$ACTIVE_IMAGE $U_TMP_MNT
	UPDATE_URL=${UPDATE_URL:-$(awk '/^UPDATE_URL/ { print $2 }' $U_TMP_MNT/.INFO)}
	umount -f $U_TMP_MNT

	[ $UPDATE_URL ] ||
		_e "'$2' did not provided any information for the update; aborting."

	zsync ${UPDATE_URL#*zsync\|} -o $ACTIVE_IMAGE ||
		_e "Failed to update '$2'."

	echo "Successfully updated '$2'."
}


#    Rollback an update.
#    _rollback <device> <image>.

_rollback () {
	[ $# -eq 2 ] ||
		_e "Wrong number of arguments."

	_mount $1 ZNX_DATA

	echo "Reverting last update of '$2'."

	cd $TMP_MNT/STORE/$2 ||
		_e "$IMAGE is not deployed."

	mv -f $BACKUP_IMAGE $ACTIVE_IMAGE ||
		_e "Unable to perform a rollback on '$2'."

	echo "Sucessfully performed rollback on '$2'."
}


#    Clear all user data for the specified image.
#    _reset <device> <image>.

_reset () {
	[ $# -eq 2 ] ||
		_e "Wrong number of arguments."

	_confirm "This operation will remove ALL user data found in '$2'."

	_mount $1 ZNX_DATA

	echo "Clearing user data on '$2'."

	rm -rf $TMP_MNT/STORE/$2/DATA/* ||
		_e "Failed to clear data on '$2'."

	echo "Successfully cleared data on '$2'."
}


#    Delete the backup image that is created after an update.
#    _clean <device> <image>.

_clean () {
	[ $# -eq 2 ] ||
		_e "Wrong number of arguments."

	_confirm "The backup image for '$1' will be removed. Do you want to proceed?"

	_mount $1 ZNX_DATA

	echo "Cleaning '$2'."

	cd $TMP_MNT/STORE/$2 ||
		_e "'$2' is not deployed."

	rm -f $BACKUP_IMAGE
	echo "Sucessfully cleaned $IMAGE."
}


#    Remove the specified image.
#    _remove <device> <image>.

_remove () {
	[ $# -eq 2 ] ||
		_e "Wrong number of arguments."

	_confirm "'$2' will be removed from '$1'. Do you want to proceed?"

	_mount $1 ZNX_DATA
	echo "Removing '$2'."

	[ -d $TMP_MNT/STORE/$2 ] ||
		_e "'$2' is not deployed."

	rm -rf $TMP_MNT/STORE/$2
	echo "Successfully removed '$2'."

	#    Silently remove empty directories. Issue #52.

	rmdir --ignore-fail-on-non-empty $TMP_MNT/STORE/*
}


#    Show the status of the given image.
#    _status <device> <image>.

_status () {
	[ $# -eq 2 ] ||
		_e "Wrong number of arguments."

	_mount $1 ZNX_DATA

	cd $TMP_MNT/STORE/$2 ||
		_e "'$2' is not deployed."

	echo "Image size: $(ls -sh $ACTIVE_IMAGE | cut -d ' ' -f 1)."
	echo "Last update: $(date -u -r $ACTIVE_IMAGE)."
	echo "Backup size: $({ ls -sh $BACKUP_IMAGE 2> /dev/null || echo 0; } | cut -d ' ' -f 1)."
}


#    List the deployed images.
#    _list <device>.

_list () {
	[ $# -eq 1 ] ||
		_e "Wrong number of arguments."

	_mount $1 ZNX_DATA

	cd $TMP_MNT/STORE 2> /dev/null ||
		_e "No images are deployed."

	ls -1 -d */*
}


#    Settings.

PREFIX=${0%/*}

ACTIVE_IMAGE=IMAGE.0
BACKUP_IMAGE=IMAGE.0.zs-old

TMP_MNT=$(mktemp -d)


#    Always perform a cleanup on exit.

trap _on_exit EXIT HUP INT TERM


#    Commit from which this build was generated.

VERSION=@TRAVIS_COMMIT@


#    Shortcut for enabling debugging.

[ "$1" = "-x" ] &&
	set -x


#    Option handling.

[ $# -gt 0 ] ||
	_e "No command given. Try '${0##*/} -h' for more information."

CMD=$1
shift

case $CMD in

	-h|--help)
		cat $PREFIX/HELP
		exit
	;;

	-v|--version)
		echo "znx version: $VERSION."
		exit
	;;

esac


#   Check if it is being ran as root.

[ $(id -u) -eq 0 ] ||
	_e "This program must be ran as root."


#   Command handling.

case $CMD in

	init)      _init $@      ;;
	fix-esp)   _fix_esp $@   ;;
	deploy)    _deploy $@    ;;
	rename)    _rename $@    ;;
	update)    _update $@    ;;
	rollback)  _rollback $@  ;;
	reset)     _reset $@     ;;
	clean)     _clean $@     ;;
	remove)    _remove $@    ;;
	status)    _status $@    ;;
	list)      _list $@      ;;

	*) _e "Unknown command '$1'." ;;

esac
